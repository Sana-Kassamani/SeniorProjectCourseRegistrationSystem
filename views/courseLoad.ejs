<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Timetable</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="main.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <!-- Animation CSS -->
  <style>
    body,html{
  
    font-family: Arial, sans-serif;
    }
    table {
      /* animation: slideInUp 1s ease-out; */
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
    }

    th,
    td {
      padding: 12px;
      text-align: center;
      border: 1px solid #ddd;
    }

    th {
      background-color: #042630;
      color: #d0d6d6;
    }

    /* tbody tr:hover {
      background-color: #f1f1f1;
      transition: background-color 0.3s ease;
    } */

    td {
      position: relative;
      transition: transform 0.2s ease;
    }

    /* td:hover {
      transform: scale(1.05);
    } */

    /*td::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.1);
      opacity: 0;
      transition: opacity 0.3s ease;
    }*/

    td:hover::before {
      opacity: 1;
    }

    .chart-container {
      max-width: 600px;
      margin: auto;
      overflow-x: auto;
    }
    #semesterForm {
    display: inline-block;
    background: transparent; /* Remove white background */
    border: none; /* Remove border if present */
  }

  #semesterSelect {
    background: transparent; /* Ensure select background is transparent */
    border: none; 
    color: #042630; /* Match the label color */
    width: 70px;
  }
  /* option{
    background-color: #fff;
    color: #042630;
  } */
  /* .form-select {
    background-image: none;
    background-color:#86b9b0;
} */
.form-select option {
    background-color:#fff;
    color: #042630;
} 

  </style>
</head>

<body>
  <!-- Your navigation and sidebar includes -->
  <%- include ('NavBar.ejs') -%>
    <div id="wrapper">
      <%- include ('SideBar.ejs') -%>

        <div id="page-content-wrapper">
          <div id="Load">
            <h2 >Timetable</h2>

            <div class="mb-3">
              <label id="selectedSemester" class="form-label mt-2" style="color: #042630"></label>
              <form id="semesterForm" action="/courseLoad" method="POST">
              
                <select id="semesterSelect" class="form-select" name="value" >
                  <option value="Fall 2024">ï¸¾</option>
                  <option value="Fall 2024">Fall 2024</option>
                  <option value="Summer 2024">Summer 2024</option>
                  <option value="Spring 2024">Spring 2024</option>
                  <option value="Fall 2023">Fall 2023</option>
                </select>
              </form>
             
            </div>
            <div class="table-responsive">
              <table class="table table-bordered "style="color: #042630; font-family: Arial, sans-serif;">
                <thead class="table-dark" >
                  <tr>
                    <th>Time</th>
                    <th>Monday</th>
                    <th>Tuesday</th>
                    <th>Wednesday</th>
                    <th>Thursday</th>
                    <th>Friday</th>
                  </tr>
                </thead>
                <tbody>
                  <% const daysOfWeek = ['M', 'T', 'W', 'TH', 'F']; %>
                  <% const timeSlots = [...new Set(data.map(course => course.Time))].sort((a, b) => {
                    const parseTime = time => {
                      const [startHour] = time.split('-')[0].split(':').map(Number);
                      return startHour === 12 ? 0 : (startHour > 6 ? startHour : startHour + 12); 
                    };
                    return parseTime(a) - parseTime(b);
                  }); %>

                      <% timeSlots.forEach(slot => { %>
                        <tr>
                          <td>
                            <%= slot %>
                          </td>
                          <% daysOfWeek.forEach(day=> { %>
                            <% const coursesForSlot=data.filter(course=> course.Days.includes(day) && course.Time === slot); %>
                              <td>
                                <% if (coursesForSlot.length> 0) { %>
                                  <% coursesForSlot.forEach(course=> { %>
                                    <div>
                                      <strong>
                                        <%= course.CourseCode %>
                                      </strong><br>
                                      <%= course.FName %>
                                        <%= course.LName %><br>
                                          <%= course.Room %>
                                    </div>
                                    <% }); %>
                                      <% } else { %>
                                        <div>No course scheduled</div>
                                        <% } %>
                              </td>
                              <% }); %>
                        </tr>
                        <% }); %>
                </tbody>
              </table>
            </div>
          </div>

          <div class="container mt-5 chart-container">
            <h2 >Courses Chart</h2>
            <div style="width: 900px;"> <!-- Adjust width to fit the chart -->
              <canvas id="courseLoadChart" ></canvas>
          </div>
        </div>
          <button class="btn mt-4" onclick="showGpaCalculation()" style="justify-content:left;">Calculate GPA</button>

          <!-- GPA Calculation Section -->
          <div id="gpa-calculation" class="mt-5" style="display: none;">
            <h3 >Calculate your GPA for this semester</h3>
            <div class="table-responsive">
              <table class="table">
                <thead>
                  <tr>
                    <th>Course</th>
                    <th>Credits</th>
                    <th>Grade</th>
                  </tr>
                </thead>
                <tbody id="gpa-calculation-body">
                  <% const semesters={ "Spring 2024" : data }; %>
                    <% const latestSemester=Object.keys(semesters).sort().pop(); %>
                      <% semesters[latestSemester].forEach(function(course) { %>
                        <tr>
                          <td>
                            <%= course.CourseCode %>
                          </td>
                          <td>
                            <%= course.Credits %>
                          </td>
                          <td>
                            <select class="form-select grade" required>
                              <option value="" selected disabled>Select grade</option>
                              <option value="A+">A+</option>
                              <option value="A">A</option>
                              <option value="A-">A-</option>
                              <option value="B+">B+</option>
                              <option value="B">B</option>
                              <option value="B-">B-</option>
                              <option value="C+">C+</option>
                              <option value="C">C</option>
                              <option value="C-">C-</option>
                              <option value="D+">D+</option>
                              <option value="D">D</option>
                              <option value="D-">D-</option>
                              <option value="F">F</option>
                            </select>
                          </td>
                        </tr>
                        <% }); %>
                </tbody>
              </table>
              <button class="btn " onclick="calculateGPA()">Calculate</button>
              <h4 class="mt-3 ">Semester GPA: <span id="calculated-gpa">N/A</span></h4>
            </div>
          </div>
        

      </div>
    </div>
    <script src="sidebar.js"></script>
    <script>
// Function to update selected semester label and submit form
function updateSelectedSemesterAndSubmit() {
  const semesterSelect = document.getElementById('semesterSelect');
  const selectedSemesterLabel = document.getElementById('selectedSemester');
  
  // Get selected semester
  const selectedOption = semesterSelect.options[semesterSelect.selectedIndex];
  const selectedSemester = selectedOption.text;
  
  // Update label
  selectedSemesterLabel.textContent = selectedSemester;

  // Store selected semester in localStorage
  localStorage.setItem('selectedSemester', selectedSemester);

  // Submit form programmatically
  document.getElementById('semesterForm').submit();
}

// Event listener to submit form on select change
document.getElementById('semesterSelect').addEventListener('change', updateSelectedSemesterAndSubmit);

// Initial update of the label from localStorage (if exists)
document.addEventListener('DOMContentLoaded', function() {
  const selectedSemester = localStorage.getItem('selectedSemester');
  if (selectedSemester) {
    document.getElementById('selectedSemester').textContent = selectedSemester;
  }
});

      // Chart initialization code
      const courseData = JSON.parse('<%- JSON.stringify(data) %>');
      const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday'];
      const daysInDb=['M', 'T', 'W', 'TH', 'F']
    const courseCount = daysInDb.map(day => courseData.filter(course => course.Days.includes(day)).length);

      const ctx = document.getElementById('courseLoadChart').getContext('2d');
      const courseLoadChart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels: daysOfWeek,
          datasets: [{
            label: 'Number of Courses',
            data: courseCount,
            backgroundColor: 'rgba(231, 173, 153, 0.2)',
            borderColor: 'rgba(206, 121, 107, 1)',
            borderWidth: 2
          }]
        },
        options: {
          scales: {
        y: {
          beginAtZero: true,
          max: 7,
          ticks: {
            stepSize: 1,
            color: 0o042630 // Set the color of the y-axis labels
          }
        },
        x: {
          ticks: {
            color: 0o042630  // Set the color of the x-axis labels
          }
        }
      },
    
    plugins: {
        legend: {
          labels: {
            color: 0o042630 // Set the color of the legend labels
          }
        }
      }
    },
  });

      //new gpa script
      function showGpaCalculation() {
        document.getElementById('gpa-calculation').style.display = 'block';
      }

      function calculateGPA() {
        // Initialize variables for GPA calculation
        let totalCredits = 0;
        let totalQualityPoints = 0;


        // Loop through each row in the GPA calculation table
        $('#gpa-calculation-body tr').each(function () {
          const credits = parseFloat($(this).find('td:nth-child(2)').text());
          const grade = $(this).find('.grade').val();

          let gradePoint;
          switch (grade.toUpperCase()) {
            case 'A+':
              gradePoint = 4.0;
              break;
            case 'A':
              gradePoint = 4.0;
              break;
            case 'A-':
              gradePoint = 3.7;
              break;
            case 'B+':
              gradePoint = 3.3;
              break;
            case 'B':
              gradePoint = 3.0;
              break;
            case 'B-':
              gradePoint = 2.7;
              break;
            case 'C+':
              gradePoint = 2.3;
              break;
            case 'C':
              gradePoint = 2.0;
              break;
            case 'C-':
              gradePoint = 1.7;
              break;
            case 'D+':
              gradePoint = 1.3;
              break;
            case 'D':
              gradePoint = 1.0;
              break;
            case 'D-':
              gradePoint = 0.7;
              break;
            case 'F':
              gradePoint = 0.0;
              break;
            default:
              gradePoint = 0.0; // Handle other grades as needed
              break;
          }

          // Calculate quality points for this course
          const qualityPoints = credits * gradePoint;

          // Accumulate total credits and quality points
          totalCredits += credits;
          totalQualityPoints += qualityPoints;
        });

        // Calculate GPA
        const gpa = totalQualityPoints / totalCredits;

        // Display calculated GPA
        $('#calculated-gpa').text(gpa.toFixed(2));
      }

    </script>
</body>

</html>